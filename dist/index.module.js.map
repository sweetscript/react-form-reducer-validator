{"version":3,"file":"index.module.js","sources":["../src/validatorjs/Resolver.ts"],"sourcesContent":["import { ValidationResolver, Errors } from 'react-form-reducer';\nimport Validator, { ErrorMessages, Rules } from 'validatorjs';\n\nexport type CustomValidationCallback = (\n  fieldValue: any,\n  args: any,\n  attribute: any,\n  data: any\n) => boolean;\nexport type CustomValidationRule = {\n  name: string;\n  callback: CustomValidationCallback;\n  message: string;\n};\n\nexport default class Resolver<IData = any> extends ValidationResolver<IData> {\n  rules?: Rules;\n  messages?: ErrorMessages;\n  customRules?: CustomValidationRule[];\n\n  constructor(\n    rules: Rules,\n    messages?: ErrorMessages,\n    customValidationRules?: CustomValidationRule[]\n  ) {\n    super();\n    this.rules = rules;\n    this.messages = messages;\n    this.customRules = [\n      {\n        name: 'required_if',\n        callback: (fieldValue, args, _, data) => {\n          const isRequired = `${data[args[0]]}` === `${args[1]}`;\n          return !isRequired || (fieldValue && fieldValue !== '');\n        },\n        message: 'The :attribute field is required'\n      }\n    ].concat(customValidationRules || []);\n\n    return this;\n  }\n\n  validate(fields: IData, fieldsToCheck?: Array<keyof IData>): true | Errors {\n    let rules: { [key: string]: unknown } = this.rules || {};\n    let validateFields: { [key: string]: unknown } = fields || {};\n    if (fieldsToCheck) {\n      validateFields = {};\n      const fieldRules: { [key: string]: unknown } = {};\n      fieldsToCheck.forEach((fieldKey) => {\n        validateFields[fieldKey as string] = fields?.[fieldKey as string];\n        if (rules[fieldKey as string]) {\n          fieldRules[fieldKey as string] = rules[fieldKey as string];\n        }\n      });\n      rules = fieldRules;\n    }\n    if (this.customRules) {\n      this.customRules.forEach((customRule) => {\n        Validator.register(\n          customRule.name,\n          (value, args, attribute) => {\n            return customRule.callback(value, args, attribute, fields);\n          },\n          customRule.message\n        );\n      });\n    }\n    const validation = new Validator(\n      validateFields,\n      rules as Rules,\n      this.messages\n    );\n    const pass = validation.passes();\n    if (pass) return true;\n    return validation.errors.all();\n  }\n}\n"],"names":["Resolver","_ValidationResolver","rules","messages","customValidationRules","_this","call","customRules","name","callback","fieldValue","args","_","data","message","concat","_assertThisInitialized","prototype","validate","fields","fieldsToCheck","this","validateFields","fieldRules","forEach","fieldKey","customRule","Validator","register","value","attribute","validation","passes","errors","all","ValidationResolver"],"mappings":"uUAeqB,IAAAA,wBAAsBC,WAKzC,SAAAD,EACEE,EACAC,EACAC,GAA8CC,IAAAA,EAgB9C,OAdAA,EAAAJ,EAAAK,YAAQD,MATVH,aAAKG,EACLF,cAAQ,EAAAE,EACRE,iBAQEF,EAAAA,EAAKH,MAAQA,EACbG,EAAKF,SAAWA,EAChBE,EAAKE,YAAc,CACjB,CACEC,KAAM,cACNC,SAAU,SAACC,EAAYC,EAAMC,EAAGC,GAE9B,QADmB,GAAGA,EAAKF,EAAK,QAAaA,EAAK,KAC3BD,GAA6B,KAAfA,CACvC,EACAI,QAAS,qCAEXC,OAAOX,GAAyB,IAElCY,EAAAX,IAAAW,EAAAX,EACF,UAzByCJ,KAAAD,yEAyBxCA,EAAAiB,UAEDC,SAAA,SAASC,EAAeC,GACtB,IAAIlB,EAAoCmB,KAAKnB,OAAS,CAAA,EAClDoB,EAA6CH,GAAU,CAAA,EAC3D,GAAIC,EAAe,CACjBE,EAAiB,CAAE,EACnB,IAAMC,EAAyC,CAAE,EACjDH,EAAcI,QAAQ,SAACC,GACrBH,EAAeG,SAAsBN,SAAAA,EAASM,GAC1CvB,EAAMuB,KACRF,EAAWE,GAAsBvB,EAAMuB,GAE3C,GACAvB,EAAQqB,CACT,CACGF,KAAKd,aACPc,KAAKd,YAAYiB,QAAQ,SAACE,GACxBC,EAAUC,SACRF,EAAWlB,KACX,SAACqB,EAAOlB,EAAMmB,GACZ,OAAOJ,EAAWjB,SAASoB,EAAOlB,EAAMmB,EAAWX,EACrD,EACAO,EAAWZ,QAEf,GAEF,IAAMiB,EAAa,IAAIJ,EACrBL,EACApB,EACAmB,KAAKlB,UAGP,QADa4B,EAAWC,UAEjBD,EAAWE,OAAOC,KAC3B,EAAClC,CAAA,EA5DgDmC"}